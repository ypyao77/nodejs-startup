【安装和使用vue】
1. 安装npm-vue
            npm install -g cnpm --registry=https://registry.npm.taobao.org
            npm install -g vue
            npm install -g vue-cli

2. 升级 vue-cli 到3.0
            npm uninstall -g vue-cli
            npm install -g @vue/cli

3. 创建一个element ui应用程序
            vue create <my-app>
            cd <my-app>
            vue add element

4. 引入 router
            vue add router    # 等效于 npm install vue-router --save

5. 使用 electron-vue
            # Install vue-cli and scaffold boilerplate
            npm install -g vue-cli
            vue init simulatedgreg/electron-vue <my-app>

            # Install dependencies and run your app
            cd <my-app>
            yarn # or npm install
            yarn run dev # or npm run dev

6. 使用mock
            npm install mockjs
    注意： 使用 Mock.mock() 来模拟数据

7. 环境变量
    定义：
            .env.development | .env.production
            VUE_APP_XXXXXXXXX='YYYYYYYYYYY'
    使用：
            process.env.VUE_APP_XXXXXXXXX
    注意： 不要在 <template> 中直接使用环境变量
    .env < .env.local < .env.{MODE} < .env.{MODE}.local

8. 使用json-server-router
    注意： windows上似乎有bug，请在linux上使用

9. 使用webpack创建项目
                vue init webpack <webpack-app>
                cd <webpack-app>
                vue add router
                vue add element
                vue add vuex
                vue add axios

10. 编译webpack报错, 注释掉这行代码
                module: {
                    rules: [
                        // ...(config.dev.useEslint ? [createLintingRule()] : []),


【发布webpack工程】 --- history 模式
1. 修改配置 src/router/index.js
                    export default new Router({
                        mode: 'history',  // 将模式转换成history
                        base: process.env.NODE_ENV === 'production' ? '/dist/' : '/', 配置路由的根目录
                    })

2. 修改配置 config/index.js
                    build: {
                        ···
                        assetsPublicPath: '/dist/', // 所有的文件从根目录下的kmf中获取，达到本分享的主题"非根目录，前后端怎样配置文件"
                        ···
                    }

3. 修改配置 build/webpack.dev.conf.js 中的 historyApiFallback
                    const common = require('./webpack.common')
                    module.exports = merge(common, {
                        devServer: {
                            historyApiFallback: true
                        }
                    }

4. 修改nginx配置 nginx.conf ???
                    location / {
                        index  /dist/index.html;
                    }
                    location /dist {
                        try_files $uri $uri/ /dist/index.html;
                    }

