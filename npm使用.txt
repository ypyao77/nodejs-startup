【npm常用命令】
1.  更换npm镜像
    配置 npm 的国内镜像站点为：https://registry.npm.taobao.org
    方法1： 在系统的HOME目录新建.npmrc文件并添加 registry = https://registry.npm.taobao.org
            npm install --registry=https://registry.npm.taobao.org
    方法2： 你可以使用淘宝定制的 cnpm 命令行工具代替默认的 npm:
            npm install -g cnpm --registry=https://registry.npm.taobao.org

2. 本地安装
    方法1:  本地安装
            npm install <包>
    方法2:  全局安装
            npm install -g <包>

    全局模式安装的包不能直接通过 require 使用,但通过 npm link 命令可以打破这一限制
    比如我们将 express安装到了全局环境，使用下面的命令可以将其链接到本地环境:
            npm link express

3. 查看安装信息
    查看安装信息和依赖关系
            npm ls

4. 更新和卸载
    更新
            npm update <包>
    删除
            npm uninstall <包>

5. 搜索包
            npm search <关键字>

6. 列出npm的配置
            npm config list -l

7. 列出npm的bin目录
            npm bin

8. 更改全局安装目录
            npm config set prefix <目录>
            prefix = /home/yourUsername/npm

9. 发布
    创建账号
            npm adduser
    测试是否取得账号
            npm whoami
    发布
            npm publish
    更新包：修改 version字段，再重新发布
            npm unpublish

【使用package.json】
    当你的项目需要依赖多个包时，推荐使用 package.json。其优点为：
    * 它以文档的形式规定了项目所依赖的包
    * 可以确定每个包所使用的版本
    * 项目的构建可以重复，在多人协作时更加方便

1. 创建package.json文件
    * 手动创建
    * 通过 npm init 命令生成遵守规范的 package.json文件

2. 指定依赖包
    * dependencies: 在生产环境中需要依赖的包。通过npm install <packge> --save命令自动添加依赖到文件（或者使用简写的参数 -S）
    * devDependencies：仅在开发和测试环节中需要依赖的包。通过npm install <packge> --save-dev命令自动添加依赖到文件（或者使用简写的参数 -D）
    如果其他人也需要这个项目，只需要把这个 package.json 文件给他，然后进行简单的 npm install 即可

3. 设置默认配置
    使用 npm set 命令用来设置环境变量, 也可以用它来为 npm init 设置默认值, 这些值会保存在 ~/.npmrc文件中
            $ npm set init-author-name 'Your name'
            $ npm set init-author-email 'Your email'
            $ npm set init-author-url 'http://yourdomain.com'
            $ npm set init-license 'MIT'

【npm脚本】
1. npm 允许在package.json文件里面，使用scripts字段定义脚本命令。
            {
              // ...
              "scripts": {
                "build": "node build.js"
              }
            }

    以下两条指令的作用相同
            $ npm run build
            # 等同于执行
            $ node build.js

    使用package.json的优点：
            * 项目的相关脚本，可以集中在一个地方。
            * 不同项目的脚本命令，只要功能相同，就可以有同样的对外接口。用户不需要知道怎么测试你的项目，只要运行npm run test即可。
            * 可以利用 npm 提供的很多辅助功能。

    查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的npm run命令。
            $ npm run

2. 原理
    npm 脚本的原理非常简单。每当执行npm run，就会自动新建一个 Shell，在这个 Shell 里面执行指定的脚本命令。因此，只要是 Shell（一般是 Bash）可以运行的命令，就可以写在 npm 脚本里面。
    比较特别的是，npm run新建的这个 Shell，会将当前目录的node_modules/.bin子目录加入PATH变量，执行结束后，再将PATH变量恢复原样
    这意味着，当前目录的node_modules/.bin子目录里面的所有脚本，都可以直接用脚本名调用，而不必加上路径。
    比如，当前项目的依赖里面有 Mocha，只要直接写mocha test就可以了。
            * "test": "mocha test"
    而不用写成下面这样。
            * "test": "./node_modules/.bin/mocha test"
    由于 npm 脚本的唯一要求就是可以在 Shell 执行，因此它不一定是 Node 脚本，任何可执行文件都可以写在里面。
    npm 脚本的退出码，也遵守 Shell 脚本规则。如果退出码不是0，npm 就认为这个脚本执行失败。

3. 通配符
    以下代码中，*表示任意文件名，**表示任意一层子目录。
            * "lint": "jshint *.js"
            * "lint": "jshint **/*.js"

4. 传参
    向 npm 脚本传入参数，要使用--标明
            { "lint": "jshint **.js" }
    向上面的npm run lint命令传入参数，必须写成下面这样:
            * npm run lint --  --reporter checkstyle > checkstyle.xml
    也可以在package.json里面再封装一个命令
            {
              "lint": "jshint **.js",
              "lint:checkstyle": "npm run lint -- --reporter checkstyle > checkstyle.xml"
            }

5. 执行顺序
    如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。
    如果是并行执行（即同时的平行执行），可以使用&符号。
            $ npm run script1.js & npm run script2.js

    如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用&&符号。
            $ npm run script1.js && npm run script2.js

6. 默认值
    npm 对两个脚本提供了默认值。也就是说，这两个脚本不用定义，就可以直接使用。
            * "start": "node server.js"，
            * "install": "node-gyp rebuild"
    上面代码中，npm run start的默认值是node server.js，前提是项目根目录下有server.js这个脚本；npm run install的默认值是node-gyp rebuild，前提是项目根目录下有binding.gyp文件。

7. 钩子
    npm 脚本有pre和post两个钩子。举例来说，build脚本命令的钩子就是prebuild和postbuild。
            * "prebuild": "echo I run before the build script",
            * "build": "cross-env NODE_ENV=production webpack",
            * "postbuild": "echo I run after the build script"
    用户执行npm run build的时候，会自动按照下面的顺序执行。
            $ npm run prebuild && npm run build && npm run postbuild
    可以在这两个钩子里面，完成一些准备工作和清理工作。下面是一个例子。
            * "clean": "rimraf ./dist && mkdir dist",
            * "prebuild": "npm run clean",
            * "build": "cross-env NODE_ENV=production webpack"
    npm 默认提供下面这些钩子。
            * prepublish, postpublish
            * preinstall, postinstall
            * preuninstall, postuninstall
            * preversion, postversion
            * pretest, posttest
            * prestop, poststop
            * prestart, poststart
            * prerestart, postrestart

8. 简写形式
    四个常用的 npm 脚本有简写形式。
            * npm start是npm run start
            * npm stop是npm run stop的简写
            * npm test是npm run test的简写
            * npm restart是npm run stop && npm run restart && npm run start的简写
    npm start、npm stop和npm restart都比较好理解，而npm restart是一个复合命令，实际上会执行三个脚本命令：stop、restart、start。

9. 变量
    npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。
    首先，通过npm_package_前缀，npm 脚本可以拿到package.json里面的字段。比如，下面是一个package.json。
            {
              "name": "foo", 
              "version": "1.2.5",
              "scripts": {
                "view": "node view.js"
              }
            }
    那么，变量npm_package_name返回foo，变量npm_package_version返回1.2.5。
            // view.js
            console.log(process.env.npm_package_name); // foo
            console.log(process.env.npm_package_version); // 1.2.5
    上面代码中，我们通过环境变量process.env对象，拿到package.json的字段值。如果是 Bash 脚本，可以用$npm_package_name和$npm_package_version取到这两个值。
    npm_package_前缀也支持嵌套的package.json字段。
            "repository": {
              "type": "git",
              "url": "xxx"
            },
            scripts: {
              "view": "echo $npm_package_repository_type"
            }
    上面代码中，repository字段的type属性，可以通过npm_package_repository_type取到
    另外一个例子:
            "scripts": {
              "install": "foo.js"
            }
    上面代码中，npm_package_scripts_install变量的值等于foo.js。

    然后，npm 脚本还可以通过npm_config_前缀，拿到 npm 的配置变量，即npm config get xxx命令返回的值。比如，当前模块的发行标签，可以通过npm_config_tag取到。
            "view": "echo $npm_config_tag",
    注意，package.json里面的config对象，可以被环境变量覆盖。
            { 
              "name" : "foo",
              "config" : { "port" : "8080" },
              "scripts" : { "start" : "node server.js" }
            }
    上面代码中，npm_package_config_port变量返回的是8080。这个值可以用下面的方法覆盖
            $ npm config set foo:port 80

    最后，env命令可以列出所有环境变量。
            "env": "env"

10. 常用脚本示例
            // 删除目录
            "clean": "rimraf dist/*",

            // 本地搭建一个 HTTP 服务
            "serve": "http-server -p 9090 dist/",

            // 打开浏览器
            "open:dev": "opener http://localhost:9090",

            // 实时刷新
            "livereload": "live-reload --port 9091 dist/",

            // 构建 HTML 文件
            "build:html": "jade index.jade > dist/index.html",

            // 只要 CSS 文件有变动，就重新执行构建
            "watch:css": "watch 'npm run build:css' assets/styles/",

            // 只要 HTML 文件有变动，就重新执行构建
            "watch:html": "watch 'npm run build:html' assets/html",

            // 部署到 Amazon S3
            "deploy:prod": "s3-cli sync ./dist/ s3://example-com/prod-site/",

            // 构建 favicon
            "build:favicon": "node scripts/favicon.js",

